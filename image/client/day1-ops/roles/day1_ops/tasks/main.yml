- hosts: all
  become: true
  become_user: root

  tasks:

  - name: Install AIDE package
    ansible.builtin.dnf:
      name: aide
      state: present
    register: aide_result
    ignore_errors: true

  - name: Initialize AIDE
    ansible.builtin.shell: aide --init
    register: aide_init_result
    ignore_errors: true

  - name: Configure boot loader superuser password
    ansible.builtin.shell: |
      echo -e "1qaz2wsx3edc$RFV\n1qaz2wsx3edc$RFV" | grub2-setpassword | awk '/hash of / {print $NF}' >> /boot/grub2/user.cfg
      grub2-mkconfig -o /boot/grub2/grub.cfg
    register: grub_password_result
    ignore_errors: true

  - name: Prevent unrestricted mail relaying
    ansible.builtin.shell: postconf -e 'smtpd_clinet_restrictions = permit_mynetworks,reject'
    register: mail_relay_result
    ignore_errors: true

  - name: Set permissions for cron configuration directories
    ansible.builtin.file:
      path: /etc/cron.d/
      mode: '0700'
      recurse: yes
    register: cron_permissions_result
    ignore_errors: true

  - name: Set permissions for root initialization files
    ansible.builtin.file:
      path: /root
      mode: '0740'
      recurse: yes
    register: root_permissions_result
    ignore_errors: true

  - name: Ensure SSH server configuration file has correct permissions
    ansible.builtin.file:
      path: /etc/ssh/sshd_config.d
      mode: '0600'
      recurse: yes
    register: ssh_permissions_result
    ignore_errors: true

  - name: Ensure account lockouts persist
    ansible.builtin.lineinfile:
      path: /etc/security/faillock.conf
      regexp: '^#?\s*/var/run/faillock'
      line: '/var/log/faillock'
    register: faillock_config_result
    ignore_errors: true

  - name: Restrict ptrace usage
    ansible.builtin.blockinfile:
      path: /etc/sysctl.d/ptrace.conf
      block: |
        kernel.yama.ptrace_scope = 1
    register: ptrace_restrict_result
    ignore_errors: true

  - name: Apply sysctl changes
    ansible.builtin.shell: sysctl --system
    register: sysctl_result
    ignore_errors: true

  - name: Install and enable USBGuard
    ansible.builtin.dnf:
      name: usbguard
      state: present
    register: usbguard_install_result
    ignore_errors: true

  - name: Enable USBGuard logging
    ansible.builtin.lineinfile:
      path: /etc/usbguard/usbguard-daemon.conf
      regexp: '^AuditBackend='
      line: 'AuditBackend=LinuxAudit'
    register: usbguard_logging_result
    ignore_errors: true

  - name: Ensure system clocks are synchronized
    ansible.builtin.lineinfile:
      path: /etc/chrony.conf
      regexp: '^pool 2.rhel.pool.ntp.org iburst maxpoll 16'
      line: 'server 0.us.pool.ntp.mil iburst maxpoll 16'
    register: chrony_config_result
    ignore_errors: true

  - name: Enable pcscd service
    ansible.builtin.systemd:
      name: pcscd
      enabled: yes
      state: started
    register: pcscd_service_result
    ignore_errors: true

  - name: Protect audit logs from unauthorized changes
    ansible.builtin.blockinfile:
      path: /etc/audit/rules.d/audit.rules
      block: |
        --loginuid-immutable
        -e 2
    register: audit_protection_result
    ignore_errors: true

  - name: Enable password protection for sudo commands
    ansible.builtin.shell: find /etc/sudoers /etc/sudoers.d -type f -exec sed -i '/NOPASSWD/ s/^/# /g' {} \;
    register: sudo_protection_result
    ignore_errors: true

  - name: Set password expiration policy
    ansible.builtin.shell: passwd -x 60 -n 1 root
    register: passwd_policy_result
    ignore_errors: true

  - name: Install and configure Postfix
    ansible.builtin.dnf:
      name: postfix
      state: present
    register: postfix_install_result
    ignore_errors: true

  - name: Enable and start Postfix service
    ansible.builtin.systemd:
      name: postfix
      enabled: yes
      state: started
    register: postfix_service_result
    ignore_errors: true

  - name: Update mail aliases
    ansible.builtin.lineinfile:
      path: /etc/aliases
      regexp: '^root:'
      line: 'root: isso'
    register: mail_alias_result
    ignore_errors: true

  - name: Apply changes to mail aliases
    ansible.builtin.shell: newaliases
    register: newaliases_result
    ignore_errors: true

  - name: Fix vm_overcommit_memory issue
    ansible.builtin.shell: sysctl  -w vm/overcommit_memory=1
    register: overcommit_result
    ignore_errors: true

  - name: Fix kernel panic value
    ansible.builtin.shell: sysctl  -w kernel/panic=10
    register: kernel-panic result
    ignore_errors: true


---
- hosts: masters
  become: true
  tasks:

   - name: Copy SCC RPM
     ansible.builtin.copy:
      src: ../files//scc-5.10.1.rhel9.x86_64.rpm
      dest: ~/scc-5.10.1.rhel9.x86_64.rpm
      register: scc_rpm_copy
      ignore_errors: true
  
  
   - name: Copy SCC cleanup script
     ansible.builtin.copy:
      src: ../files/scc_cleanup.sh
      dest: /root/scc_cleanup.sh
      register: scc_cleanup
      ignore_errors: true
      
   - name: Copy SCC k8s Profiles
     ansible.builtin.copy:
      src: ../files/U_Kubernetes_V2R2_STIG_SCAP_1-3_Benchmark.zip
      dest: /opt/scc/U_Kubernetes_V2R2_STIG_SCAP_1-3_Benchmark.zip
      register: scc_k8s_profiles
      ignore_errors: true

   - name: Copy SCC RHEL Profiles
     ansible.builtin.copy:
      src: ../files//U_RHEL_9_V2R3_STIG_SCAP_1-3_Benchmark-enhancedV4.zip
      dest: /opt/scc/U_RHEL_9_V2R3_STIG_SCAP_1-3_Benchmark-enhancedV4.zip
      register: scc_rhel_profiles
      ignore_errors: true

   - name: Import benchmark
     ansible.builtin.shell: |
       dnf remove spawarscc-5.10-0.x86_64 -y
       mkdir -p /opt/scc
       rpm -i ~/scc-5.10.1.rhel9.x86_64.rpm
       /opt/scc/cscc -is /opt/scc/U_RHEL_9_V2R1_STIG_SCAP_1-3_benchmark.zip
       /opt/scc/cscc -is /opt/scc/U_Kubernetes_V2R1_STIG_SCAP_1-3_Benchmark.zip
     register: scc_benchmark
     ignore_errors: true

   - name: Root partition extend
     ansible.builtin.shell: | 
      lvextend -l +100% FREE /dev/mapper/rootvg-
     register: root_space
     ignore_errors: true
  
   - name: Finale Reboot
     ansible.builtin.reboot:
      reboot_timeout: 3600

   - name: Install SCAP RPM
     ansible.builtin.shell:
      cmd:  rpm -i ~/scc-5.10_rhel9_x86_64/scc-5.10.rhel9.x86_64.rpm --nodigest
      register: scap_install
      ignore_errors: true

   - name: DNF Updates
     ansible.builtin.shell:
      cmd: dnf update -y
      register: dnf_updates

   - name: SCC Cleanup Script Updates
     ansible.builtin.shell:
      cmd: chmod +x /root/scc_cleanup.sh
      register: scc_cleanup_sh
      ignore_errors: true

   - name: SCC Monthly Cleanup Cronjob
     ansible.builtin.cron:
       name: SCAP Cleanup
       minute: "0"
       hour: "20"
       day: "12"
       job: "/root/scc_cleanup.sh"
     register: scc_cleanup_cron
     ignore_errors: true

   - name: SCC Monthly Cronjob
     ansible.builtin.cron:
       name: SCAP Report
       minute: "0"
       hour: "20"
       day: "11"
       job: "/opt/scc/cscc"
     register: scc_monthly_cron
     ignore_errors: true
  
   - name: Enable kubelet
     ansible.builtin.shell:
        cmd: systemctl --now enable kubelet.service
     register: enable_kubelet
     ignore_errors: true

   - name: Initialize Cluster
     ansible.builtin.shell: 
       cmd: kubeadm init --control-plane-endpoint={{ lb_addr }}:6443 --upload-certs --apiserver-advertise-address={{ master_ip }} --pod-network-cidr=192.168.0.0/16 --cri-socket unix:///run/containerd/containerd.sock
       register: k8s_cluster_init

   - name: create user .kube directory
     ansible.builtin.shell: |
        mkdir -p /home/dd/.kube
        cp -i /etc/kubernetes/admin.conf /home/dd/.kube/config
        chown -R dd:dd /home/dd/.kube
     register: kube_user
     ignore_errors: true

   - name: Download Project Calico v3.30.1
     ansible.builtin.get_url:
       url: https://raw.githubusercontent.com/projectcalico/calico/v3.30.1/manifests/calico-vxlan.yaml 
       dest: ~/calico-vxlan.yaml
     register: download_calico
     ignore_errors: true
     
   - name: Install Pod network 
     ansible.builtin.shell:
       cmd: kubectl apply -f ~/calico-vxlan.yaml
     register: calico_install
    
   - name: Download Project Calico v3.30.1 API Server
     ansible.builtin.get_url:
       url: https://raw.githubusercontent.com/projectcalico/calico/v3.30.1/manifests/apiserver.yaml
       dest: ~/calico-apiserver.yaml
     register: calico_apiserver_download
     ignore_errors: true

   - name: Create Certificate for Calico API Server 
     ansible.builtin.shell:
       cmd: openssl req -x509 -nodes -newkey rsa:4096 -keyout apiserver.key -out apiserver.crt -days 365 -subj "/" -addext "subjectAltName = DNS:calico-api.calico-apiserver.svc"
     register: apiserver_cert_create
     ignore_errors: true

   - name: Create Secret for Calico API Server 
     ansible.builtin.shell: |
       kubectl create ns calico-apiserver
       kubectl create secret -n calico-apiserver generic calico-apiserver-certs --from-file=apiserver.key --from-file=apiserver.crt 
     register: apiserver_secret_install
     ignore_errors: true

   - name: Install Calico API Server 
     ansible.builtin.shell:
       cmd: kubectl apply -f ~/calico-apiserver.yaml
     register: apiserver_install
     ignore_errors: true
    
   - name: Create the command for joining the other master nodes
     ansible.builtin.shell: 
        kubeadm token create --print-join-command --certificate-key $(kubeadm init phase upload-certs --upload-certs |  awk '{for (i=1;i<3;i++) {getline}; print $0}')
     register: kubernetes_join_command

   - debug: 
       msg: "{{ kubernetes_join_command.stdout }}"

   - name: Copy join command to local file.
     local_action: 
        copy content={{ kubernetes_join_command.stdout }}
        dest="/tmp/kubernetes_join_command" 
        mode=0777

   # Sleep 120 seconds waiting on CNI installation.
   - name: Pause for 2 minutes for CNI install
     ansible.builtin.pause:
       minutes: 2

   - name: Add Calico to FAPolicy Whitelist and reload
     ansible.builtin.shell: | 
       fapolicyd-cli --file add /opt/cni/bin/calico
        fapolicyd-cli --file add /opt/cni/bin/calico-ipam
        fapolicyd-cli --update

---
- hosts: ha_control_planes
  become: true
  gather_facts: yes

  tasks:
   - name: Enable kubelet
     ansible.builtin.shell:
       cmd: systemctl --now enable kubelet.service

   - name: Copy join command from Ansiblehost to the CP nodes.
     copy:
       src: /tmp/kubernetes_join_command
       dest: /tmp/kubernetes_join_command
       mode: 0777

   - name: Join the HA Masters nodes to the cluster as CP nodes
     ansible.builtin.shell:
       cmd: sh /tmp/kubernetes_join_command

   # Sleep 120 seconds waiting on CNI installation.
   - name: Pause for 2 minutes waiting on CNI install
     ansible.builtin.pause:
       minutes: 2

   - name: Add Calico to FAPolicy Whitelist and reload
     ansible.builtin.shell: | 
       fapolicyd-cli --file add /opt/cni/bin/calico
       fapolicyd-cli --file add /opt/cni/bin/calico-ipam
       fapolicyd-cli --update

---
- hosts: all_masters
  become: true
  gather_facts: yes

- tasks:
   - name: k8s audit directory and log file
     ansible.builtin.shell: |
       mkdir -p /var/log/kubernetes/audit
       touch /var/log/kubernetes/audit/audit.log

   - name: k8s admissioncontrolconfig directory
     ansible.builtin.shell:
     cmd: mkdir -p /etc/kubernetes/config/

   - name: Copy Audit Policy YAML
     ansible.builtin.copy:
       src: ./audit-policy.yaml
       dest: /etc/kubernetes/audit-policy.yaml

   - name: Copy Admission Control Config YAML
     ansible.builtin.copy:
       src: ./admissionControlConfig.yaml
       dest: /etc/kubernetes/config/admissionControlConfig.yaml

## CAT I
# V-242386 - The Kubernetes API server must have the insecure port flag disabled. - Implemented in k8s v1.20 https://github.com/kubernetes/kubeadm/issues/2156
# V-242397 - The Kubernetes kubelet staticPodPath must not enable static pods. - WONTFIX

## CAT II
#V-242445 - The Kubernetes component etcd must be owned by etcd. - WONTFIX
      

   - name: CAT I V-242434, CAT II V-245541 CAT II V-242424 - CAT II V-242425
     ansible.builtin.shell: |
       echo protectKernelDefaults: true >> /var/lib/kubelet/config.yaml
       echo tlsCipherSuites: [TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384] >> /var/lib/kubelet/config.yaml
       sed -i 's/streamingConnectionIdleTimeout: 0s/streamingConnectionIdleTimeout: 5m/g' /var/lib/kubelet/config.yaml
       echo tlsCertFile: /etc/kubernetes/pki/apiserver.crt  >> /var/lib/kubelet/config.yaml
       echo tlsPrivateKeyFile: /etc/kubernetes/pki/apiserver.key  >> /var/lib/kubelet/config.yaml
       systemctl daemon-reload && systemctl restart kubelet

   - name: CAT II V-242376 - CAT II V-242409 
     ansible.builtin.shell: |
       sed -i '/- kube-controller-manager/a\\    - --tls-min-version=VersionTLS12' /etc/kubernetes/manifests/kube-controller-manager.yaml 
       sed -i '/- kube-controller-manager/a\\    - --profiling=false' /etc/kubernetes/manifests/kube-controller-manager.yaml 

   - name: CAT II V-242377 - The Kubernetes Scheduler must use TLS 1.2, at a minimum, to protect the confidentiality of sensitive data during electronic dissemination.
     ansible.builtin.shell:
        cmd: sed -i '/- kube-scheduler/a\\    - --tls-min-version=VersionTLS12' /etc/kubernetes/manifests/kube-scheduler.yaml

   - name: CAT II V-242378 - CAT II V-242465 - CAT II V-242464 - CAT II V-242463 - CAT II V-242462 - CAT II V-242461 - CAT II V-242438 - CAT II V-242418 - CAT II V-242403 - CAT II V-242402
     ansible.builtin.shell: |
       sed -i '/- kube-apiserver/a\\    - --tls-min-version=VersionTLS12' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/- kube-apiserver/a\\    - --audit-policy-file=/etc/kubernetes/audit-policy.yaml' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/- kube-apiserver/a\\    - --tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/- kube-apiserver/a\\    - --request-timeout=60s' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/volumes:/a \  - hostPath:\n      path: /etc/kubernetes/audit-policy.yaml\n      type: File\n    name: audit\n  - hostPath:\n      path: /var/log/kubernetes/audit/audit.log\n      type: File\n    name: audit-log' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/volumeMounts:/a \ \ \ \ - mountPath: /etc/kubernetes/audit-policy.yaml\n      name: audit\n      readOnly: true\n \ \ \ - mountPath: /var/log/kubernetes/audit/audit.log\n      name: audit-log\n      readOnly: false' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/- kube-apiserver/a\\    - --audit-log-maxsize=500' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/--service-cluster-ip/a\\    - --audit-log-maxbackup=10' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/--service-cluster-ip/a\\    - --audit-log-maxage=30' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/--service-cluster-ip/a\\    - --audit-log-path=/var/log/kubernetes/audit/audit.log' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/- kube-apiserver/a\\    - --admission-control-config-file=/etc/kubernetes/config/admissionControlConfig.yaml' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/volumes:/a \  - hostPath:\n      path: /etc/kubernetes/config/admissionControlConfig.yaml\n      type: File\n    name: admissioncontrolconfig' /etc/kubernetes/manifests/kube-apiserver.yaml
       sed -i '/volumeMounts:/a \ \ \ \ - mountPath: /etc/kubernetes/config/admissionControlConfig.yaml\n      name: admissioncontrolconfig\n      readOnly: true' /etc/kubernetes/manifests/kube-apiserver.yaml
       systemctl daemon-reload && systemctl restart kubelet

   - name: CAT II V-242379 - CAT II V-242380
     ansible.builtin.shell: |
       sed -i '/- etcd/a\\    - --auto-tls=false' /etc/kubernetes/manifests/etcd.yaml
       sed -i '/- etcd/a\\    - --peer-auto-tls=false' /etc/kubernetes/manifests/etcd.yaml

---
- hosts: workers
  become: true
  gather_facts: yes

  tasks:
    - name: Copy Set Firewall Ports file with owner and permissions
      ansible.builtin.copy:
        src: ../files/setfwports.sh
        dest: /home/dd/setfwports.sh
    
    - name: Execute setting Firewall ports and systemctl
      ansible.builtin.shell:
        cmd: source /home/dd/setfwports.sh

    - name: Copy join command from Ansiblehost to the worker nodes.
      copy:
        src: /tmp/kubernetes_join_command
        dest: /tmp/kubernetes_join_command
        mode: 0777

    - name: Fix to the join command #Remove --control-plane
      ansible.builtin.shell:
        sed -i 's/--control-plane//g' /tmp/kubernetes_join_command

    - name: Join the Worker nodes to the cluster.
      command: sh /tmp/kubernetes_join_command
      register: joined_or_not

    # Sleep 120 seconds waiting on CNI installation.
    - name: Pause for 2 minutes to build app cache
      ansible.builtin.pause:
        minutes: 2

    - name: Add Calico to FAPolicy Whitelist and reload
      ansible.builtin.shell: | 
        fapolicyd-cli --file add /opt/cni/bin/calico
        fapolicyd-cli --file add /opt/cni/bin/calico-ipam
        fapolicyd-cli --update

      # CAT II - V-242459 - The Kubernetes etcd must have file permissions set to 644 or more restrictive. - WONTFIX - etcd running as a pod. 
    - name: CAT II - V-242406 - The Kubernetes Kubelet Configuration file must be owned by root.
      ansible.builtin.shell:
        cmd: chown root:root /var/lib/kubelet/config.yaml